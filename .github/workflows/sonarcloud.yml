name: CI using Sonarcloud
on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
	
jobs:
  StaticCodeAnalysis:
  name: Build and analyze
  runs-on: ubuntu-latest
  steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Build and analyze
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"manasanttdata_GLLambdadeploypipeline" /o:"manasanttdata" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build --configuration Release
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  BuildandPublishArtifacts:
    needs: StaticCodeAnalysis
    runs-on: ubuntu-latest
    steps:

      - name: dotnet build
        run: dotnet build -c Release
      - name: dotnet publish
        run: dotnet publish -c Release -o out
      
      - name : Zip contents of the folder
        run: | 
          cd out;
          zip -r ../publish.zip *

      - name: copy folders to artifact
        run: |
          mkdir Artifacts
          cp ./publish.zip ./Artifacts
          ls Artifacts
     
      - name : Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: artifactfile
          path: out
